buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.1.0'
        // classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
    }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'maven'
apply plugin: 'signing'
// apply plugin: 'com.jfrog.bintray'

sourceCompatibility = 1.5

repositories {
    mavenCentral()
    jcenter();
}

dependencies {
    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'nl.jqno.equalsverifier:equalsverifier:1.6'
    testCompile 'com.google.guava:guava:18.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar, javadocJar
}

signing {
    required { isReleaseBuild() }
    sign configurations.archives
}

// Adapted from https://github.com/chrisbanes/gradle-mvn-push/blob/master/gradle-mvn-push.gradle
// Modificaions made to make it not rely on android project
uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            
            repository(url: getReleaseRepositoryUrl()) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }

            snapshotRepository(url: getSnapshotRepositoryUrl()) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }

            pom.groupId = GROUP
            pom.artifactId = POM_ARTIFACT_ID
            pom.version = VERSION_NAME

            pom.project {
                name POM_NAME
                packaging POM_PACKAGING
                description POM_DESCRIPTION
                url POM_URL

                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }

                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }

                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                    }
                }
            }
        }
    }
}

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
    : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
    : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

//
// bintray {
//     user = BINTRAY_USER //this usually comes from gradle.properties file in ~/.gradle
//     key = BINTRAY_API_KEY //this usually comes from gradle.properties file in ~/.gradle
//
//     publications = ['mavenJava'] //When uploading Maven-based publication files
//     dryRun = true //Whether to run this as dry-run, without deploying
//     publish = true //If version should be auto published after an upload
//     pkg {
//         repo = 'sixpack-java'
//         userOrg = 'seatgeek'
//         name = 'sixpack-java'
//         desc = 'A java client for the sixpack A/B testing framework'
//         websiteUrl = 'https://github.com/seatgeek/sixpack-java'
//         issueTrackerUrl = 'https://github.com/seatgeek/sixpack-java/issues'
//         vcsUrl = 'https://github.com/seatgeek/sixpack-java.git'
//         licenses = ['BSD-2-Clause']
//         //labels = ['seatgeek', 'sixpack', 'java']
//         publicDownloadNumbers = true
//         //Optional version descriptor
//         version {
//             name = project.version //Bintray logical version name
//             desc = 'optional, version-specific description'
//             released  = 'optional, date of the version release' //2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
//             vcsTag = '1.3.0'
//             gpg {
//                 sign = true //Determines whether to GPG sign the files. The default is false
//                 passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
//             }
//             mavenCentralSync {
//                 sync = true //Optional (true by default). Determines whether to sync the version to Maven Central.
//                 user = 'userToken' //OSS user token
//                 password = 'paasword' //OSS user password
//                 close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
//             }
//         }
//     }
// }
